{
  "name": "async-done",
  "version": "0.4.0",
  "description": "Handles completion and errors for callbacks, promises, observables and streams.",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "tap ./test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/phated/async-done"
  },
  "author": {
    "name": "Blaine Bublitz",
    "email": "blaine@iceddev.com",
    "url": "http://iceddev.com/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/phated/async-done/issues"
  },
  "homepage": "https://github.com/phated/async-done",
  "dependencies": {
    "end-of-stream": "^0.1.4",
    "next-tick": "^0.2.2",
    "once": "^1.3.0",
    "stream-exhaust": "^1.0.0"
  },
  "devDependencies": {
    "tap": "~0.4.8",
    "through2": "~0.4.1",
    "when": "~2.8.0",
    "rx": "~2.x.x"
  },
  "readme": "async-done\n==========\n\n[![build status](https://secure.travis-ci.org/phated/async-done.png)](http://travis-ci.org/phated/async-done)\n\nHandles completion and errors for callbacks, promises, observables and streams.\n\nWill run call the function on `nextTick`. This will cause all functions to be async.\n\n## Usage\n\n### Successful completion\n\n```js\nvar asyncDone = require('async-done');\n\nasyncDone(function(done){\n  // do async things\n  done(null, 2);\n}, function(error, result){\n  // `error` will be undefined on successful execution of the first function.\n  // `result` will be the result from the first function.\n});\n```\n\n### Failed completion\n\n```js\nvar asyncDone = require('async-done');\n\nasyncDone(function(done){\n  // do async things\n  done(new Error('Some Error Occurred'));\n}, function(error, result){\n  // `error` will be an error from the first function.\n  // `result` will be undefined on failed execution of the first function.\n});\n```\n\n## API\n\n### `asyncDone(fn, callback)`\n\nTakes a function to execute (`fn`) and a function to call on completion (`callback`).\n\n#### `fn([done])`\n\nOptionally takes a callback to call when async tasks are complete.\n\n#### Completion and Error Resolution\n\n* `Callback` called\n  - Completion: called with null error\n  - Error: called with non-null error\n* `Stream` or `EventEmitter` returned\n  - Completion: [end-of-stream](https://www.npmjs.org/package/end-of-stream) module\n  - Error: [domains](http://nodejs.org/api/domain.html)\n* `Promise` returned\n  - Completion: [onFulfilled](http://promisesaplus.com/#point-26) method called\n  - Error: [onRejected](http://promisesaplus.com/#point-30) method called\n* `Observable` returned\n  - Completion: [onCompleted](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypesubscribeobserver--onnext-onerror-oncompleted) method called\n  - Error: [onError](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypesubscribeobserver--onnext-onerror-oncompleted) method called\n\n__Warning:__ Sync taks are __not supported__ and your function will never complete if the one of the above strategies is not used to signal completion. However, thrown errors will be caught by the domain.\n\n#### `callback(error, result)`\n\nIf an error doesn't occur in the execution of the `fn` function, the `callback` method will receive the results as its second argument. Note: Observable and some streams don't received any results.\n\nIf an error occurred in the execution of the `fn` function, The `callback` method will receive an error as its first argument.\n\nErrors can be caused by:\n\n* A thrown error\n* An error passed to a `done` callback\n* An `error` event emitted on a returned `Stream` or `EventEmitter`\n* A rejection of a returned `Promise`\n* The `onError` handler being called on an `Observable`\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "async-done@0.4.0",
  "_shasum": "ab8053f5f62290f8bfc58f37cd9b73070b3307b9",
  "_from": "async-done@^0.4.0",
  "_resolved": "https://registry.npmjs.org/async-done/-/async-done-0.4.0.tgz"
}
