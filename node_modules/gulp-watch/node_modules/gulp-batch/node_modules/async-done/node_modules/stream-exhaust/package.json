{
  "name": "stream-exhaust",
  "version": "1.0.0",
  "description": "Ensure that a stream is flowing data without mutating it",
  "main": "index.js",
  "scripts": {
    "test": "node test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/chrisdickinson/stream-exhaust.git"
  },
  "author": {
    "name": "Chris Dickinson",
    "email": "chris@neversaw.us"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/chrisdickinson/stream-exhaust.git"
  },
  "homepage": "https://github.com/chrisdickinson/stream-exhaust.git",
  "devDependencies": {
    "readable-stream": "^1.0.31",
    "tape": "^2.14.0",
    "through2": "^0.5.1"
  },
  "readme": "# stream-exhaust\n\nEnsure that the provided stream is flowing data, even if the stream hasn't been\npiped to another stream.\n\n``javascript\nvar exhaustively = require('stream-exhaust');\n\nexhaustively(fs.createReadStream(__filename))\n  .on('close', () => { console.log('all done, despite being streams{1+N}!') });\n\n``\n\n## Prior Art\n\nThis is based on [stream-consume](https://github.com/aroneous/stream-consume)\nby [aroneous](https://github.com/aroneous). It is a separate package because it has\ndifferent semantics:\n\n1. It does not call `.resume()` on streams2+ streams. streams2 streams monkeypatch `.pipe`\nwhen entering flowing mode; avoiding `resume()` avoids that fate.\n2. It does not examine `._readableState`; instead it checks for the presence of `._read`.\n\n## API\n\n### exhaust(Stream s) -> Stream s\n\nTakes a stream, `s`, and returns it. Ensures that the stream is flowing, either by calling\n`.resume()` if the stream is a streams1 stream, or by piping it to a \"black hole\" stream that\ncontinually asks for more data.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "stream-exhaust@1.0.0",
  "_shasum": "edc3579ea69ed9050360a9ced8e9f9e6a18fe70d",
  "_from": "stream-exhaust@^1.0.0",
  "_resolved": "https://registry.npmjs.org/stream-exhaust/-/stream-exhaust-1.0.0.tgz"
}
